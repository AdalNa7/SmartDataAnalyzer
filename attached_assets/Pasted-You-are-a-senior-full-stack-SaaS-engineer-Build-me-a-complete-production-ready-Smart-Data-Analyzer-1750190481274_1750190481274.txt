You are a senior full-stack SaaS engineer. Build me a complete, production-ready Smart Data Analyzer (SDA) web platform using Flask (backend) and HTML/CSS/JS + Bootstrap 5 (frontend) with modern design. I want a beautiful, error-free, AI-powered platform that helps businesses turn raw Excel or CSV sales data into insights.

Include the following core features:

1. **Homepage with Upload Form**  
   - Users can upload `.xlsx` or `.csv` files  
   - Validate the file format  
   - Display helpful placeholder text: “Upload sales data (required columns: product, quantity, price, date, time)”

2. **Results Dashboard (after upload)**  
   - Show a multi-tab layout:  
     - 📊 “AI Report” tab  
     - 🧹 “Smart Data Cleaning” tab  
     - 💬 “Conversational” tab  
   - Each tab must look like a SaaS product (cards, icons, clean spacing, responsive)

3. **AI Report Tab (Demo)**  
   - Add a “Generate AI Report” button that fetches dummy JSON from `/report`  
   - Return a JSON structure with keys: `report`, `insights`, `cleaning`, `personalized`  
   - Display the report using Bootstrap cards or badges

4. **Smart Data Cleaning Tab (Demo)**  
   - Simulate detection of missing data, outliers, and suggest fixes  
   - Use icons and styled callouts to show suggestions

5. **Conversational Exploration Tab (Demo)**  
   - Add a chat-style form (with input + send icon)  
   - User asks questions like “What’s my best-selling product?”  
   - Return dummy responses using a placeholder function  
   - Keep code ready to later plug into OpenAI or another LLM

6. **Backend Setup**  
   - Flask app structure with routes: `/`, `/upload`, `/report`, `/explore`  
   - Safe file parsing using `pandas`  
   - Include dummy logic for now, with placeholders for real AI later  
   - Avoid any “No valid JSON” issues — use `jsonify()` and always return valid responses  
   - Handle all edge cases (missing columns, invalid files)

7. **Replit Requirements**  
   - Make it fully functional on Replit  
   - Use a `.replit` file if needed  
   - Make it work with minimal setup  
   - Avoid hardcoded local paths

Optional: Add a “credit system” placeholder (to simulate monetization later).  

End result: A working AI-powered web app that feels like a SaaS dashboard, is demo-ready, has no JSON/JS bugs, and impresses potential clients or investors.
